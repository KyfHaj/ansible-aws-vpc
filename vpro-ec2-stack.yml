- name: Setup Vprofile Stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import VPC setup Variable
      include_vars: vars/output_vars    #Nhớ kiểm tra file vars/output_vars

    - name: Import vprofile setup Variable
      include_vars: vars/vprofilestacksetup

            ##  Tạo keypair
    - name: Create vprofile ec2 keypair
      ec2_key:
        name: vprokey
        region: "{{ region }}"
      register: vprokey_out

    - debug:
       var: vprokey_out

    - name: store login key
      copy:
        content: "{{vprokey_out.key.private_key}}"
        dest: ./vprokey.pem
        mode: 0600
      when: vprokey_out.changed

            ## Tạo SG cho ELB (port 80 cho anywhere)
    - name: Create Security Group for Load Balancer
      ec2_group:
        name: vproELB-sg
        description: Allow port 80 (http) from anywhere
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: vproELBSG_out

           ## Tạo SG cho ELB (port 80 chỉ cho ELB, 22 chỉ cho Bastion-host và all port cho chính nó)

    - name: Create Security Group for vprofile Stack
      ec2_group:
        name: vproStack-sg
        description: Allow port 22 (http) from bastion host and all port 80 from ELB
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ vproELBSG_out.group_id }}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{ BastionSGid }}" ## Nhớ kiểm tra file vars/output_vars. format cho đúng
      register: vproStackSG_out

    - name: Update Security Group with its own sg id
      ec2_group:
        name: vproStack-sg
        description: Allow all port within sg
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        purge_rules: no             # Là để ko xóa rules trước đó
        rules:
          - proto: all
            group_id: "{{ vproStackSG_out.group_id }}"

        ## Tạo 5 instace: web01, app01, db01, rmq01, mem01

    - name: Create Nginx web01
      ec2:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ nginx_ami }}"
        wait: yes
        wait_timeout: 300

        instance_tags:
          Name: "web01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1

        count_tag:
          Name: "web01"
          Project: Vprofile
          Owner: DevOps Team

        group_id: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ prisub1id }}"
      register: web01_out

    - name: Create tomcat app01
      ec2:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ tomcat_ami }}"
        wait: yes
        wait_timeout: 300

        instance_tags:
          Name: "app01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1

        count_tag:
          Name: "app01"
          Project: Vprofile
          Owner: DevOps Team

        group_id: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ prisub1id }}"
      register: app01_out

    - name: Create RabbitMQ rmq01
      ec2:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ rmq_ami }}"
        wait: yes
        wait_timeout: 300

        instance_tags:
          Name: "rmq01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1

        count_tag:
          Name: "rmq01"
          Project: Vprofile
          Owner: DevOps Team

        group_id: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ prisub1id }}"
      register: rmq01_out

    - name: Create memcache mc01
      ec2:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ memcache_ami }}"
        wait: yes
        wait_timeout: 300

        instance_tags:
          Name: "mc01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1

        count_tag:
          Name: "mc01"
          Project: Vprofile
          Owner: DevOps Team

        group_id: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ prisub1id }}"
      register: mc01_out

    - name: Create Mysql db01
      ec2:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ mysql_ami }}"
        wait: yes
        wait_timeout: 300

        instance_tags:
          Name: "db01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1

        count_tag:
          Name: "db01"
          Project: Vprofile
          Owner: DevOps Team

        group_id: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ prisub1id }}"
      register: db01_out